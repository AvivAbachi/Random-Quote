{"version":3,"sources":["App.js","index.js"],"names":["COLOR_LIST","QuoteBox","React","memo","props","quoteBoxRef","useRef","useState","text","setText","author","setAuthor","useEffect","quoteIN","useCallback","axios","get","then","response","data","content","changeAnimation","catch","error","String","out","creaditStyle","current","style","randomDirection","Math","random","x","y","r","transform","animationName","Card","ref","id","className","color","Body","Title","icon","faQuoteLeft","size","faQuoteRight","Text","variant","Row","Button","href","title","target","faTwitter","onClick","setColor","setTimeout","Creadit","creaditRef","opacity","App","SetColor","randomColor","newColor","floor","Container","fluid","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4b2a0929.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { Card, Container, Button, Row } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faQuoteLeft, faQuoteRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport axios from \"axios\";\r\n\r\nconst COLOR_LIST = [\r\n  \"primary\",\r\n  \"secondary\",\r\n  \"success\",\r\n  \"danger\",\r\n  \"warning\",\r\n  \"info\"\r\n];\r\n\r\nconst App = () => {\r\n  const [color, SetColor] = useState();\r\n\r\n  const randomColor = useCallback(() => {\r\n    const newColor = COLOR_LIST[Math.floor(Math.random() * 6)];\r\n    newColor === color ? randomColor() : SetColor(newColor);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => randomColor(), [randomColor]);\r\n\r\n  return (\r\n    <Container id=\"App\" className={\"App bg-\" + color} fluid>\r\n      <QuoteBox color={color} setColor={() => randomColor()} />\r\n      <Creadit color={color} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst QuoteBox = React.memo(props => {\r\n  const quoteBoxRef = useRef();\r\n  const [text, setText] = useState();\r\n  const [author, setAuthor] = useState();\r\n\r\n  // eslint-disable-next-line\r\n  useEffect(() => quoteIN(), []);\r\n\r\n  const quoteIN = useCallback(() => {\r\n    axios\r\n      .get(\"https://api.quotable.io/random\")\r\n      .then(response => response.data)\r\n      .then(data => {\r\n        setText(data.content);\r\n        setAuthor(data.author);\r\n        changeAnimation();\r\n      })\r\n      .catch(error => {\r\n        setText(String(error));\r\n        setAuthor(null);\r\n        changeAnimation();\r\n      });\r\n  }, []);\r\n\r\n  const quoteOUT = () => {\r\n    changeAnimation(true);\r\n    props.setColor();\r\n    setTimeout(() => quoteIN(), 500);\r\n  };\r\n\r\n  const changeAnimation = out => {\r\n    const creaditStyle = quoteBoxRef.current.style;\r\n    let randomDirection = () => (Math.random() > 0.5 ? 450 : -450);\r\n    let x = randomDirection();\r\n    let y = randomDirection();\r\n    let r = x === 450 ? 45 : -45;\r\n    out\r\n      ? (() => {\r\n          creaditStyle.transform = `scale(0.625) translateX(${x}px) translateY(${y}px) rotate(${r}deg)`;\r\n          creaditStyle.animationName = \"quoteboxOut\";\r\n        })()\r\n      : (creaditStyle.animationName = \"quoteboxIn\");\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      ref={quoteBoxRef}\r\n      id=\"quote-box\"\r\n      className=\"quotebox\"\r\n      text={props.color}\r\n    >\r\n      <Card.Body>\r\n        <Card.Title id=\"text\" className=\"quotebox__text\">\r\n          {author && <FontAwesomeIcon icon={faQuoteLeft} size=\"xs\" />}\r\n          {text}\r\n          {author && <FontAwesomeIcon icon={faQuoteRight} size=\"xs\" />}\r\n        </Card.Title>\r\n        <Card.Text\r\n          id=\"author\"\r\n          className=\"quotebox__author\"\r\n          variant={props.color}\r\n        >\r\n          {author && \"- \" + author}\r\n        </Card.Text>\r\n        <Row className=\"quotebox__buttons\">\r\n          <Button\r\n            size={\"lg\"}\r\n            variant={\"outline-\" + props.color}\r\n            href=\"twitter.com/intent/tweet\"\r\n            id=\"tweet-quote\"\r\n            title=\"Tweet this quote!\"\r\n            target=\"_blank\"\r\n          >\r\n            <FontAwesomeIcon icon={faTwitter} />\r\n          </Button>\r\n          <Button\r\n            size={\"lg\"}\r\n            variant={props.color}\r\n            id=\"new-quote\"\r\n            onClick={() => quoteOUT()}\r\n          >\r\n            {author ? \"New Quote\" : \"Try Again\"}\r\n          </Button>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n});\r\n\r\nconst Creadit = props => {\r\n  let creaditRef = useRef();\r\n  useEffect(() => {\r\n    const creaditStyle = creaditRef.current.style;\r\n    creaditStyle.opacity = 1;\r\n    creaditStyle.transform = \"scale(1)\";\r\n    setTimeout(() => (creaditStyle.animationName = \"hover\"), 900);\r\n  });\r\n  return (\r\n    <Button\r\n      ref={creaditRef}\r\n      variant=\"light\"\r\n      className={\"credite text-\" + props.color}\r\n      href=\"https://github.com/AvivAbachi\"\r\n    >\r\n      Create by AvivAbachi@Gmail.com\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}